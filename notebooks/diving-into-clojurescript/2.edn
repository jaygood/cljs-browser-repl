[{:type :markdown :value
  "# Calling functions

  To call a function, you just wrap the function name in parenthesis, instead
  of putting the parenthesis after the function call as we do in JS."}
 {:type :input :value "(inc 5) ; Let's increment 5\n; In JS we would do inc(5)"}
 {:type :input :value "(inc (inc 5))"}
 {:type :stop}
 {:type :markdown :value
  "How would we know what that function does?

  In CLJS there's an easy way. You can use the special repl form `doc` and call
  it with the name of a function, and it will give you the functions
  documentation.
  "}
 {:type :input :value "(doc +)"}
 {:type :stop}
 {:type :markdown :value
  "Now you know by looking at the docs how adding numbers works, as you can see
  it tells you that you can call it with 0, 1, 2 or more arguments, and
  a description of what the function does.

  Let's try it out!"}
 {:type :input :value "(+)"}
 {:type :input :value "(+ 1)"}
 {:type :input :value "(+ 1 3)"}
 {:type :input :value "(+ 4 5 6 7)"}
 {:type :stop}
 {:type :markdown :value
  "Feel free to play with other math functions like `-`, `*` and `/`.

  Since we are feeling adventurous, lets also try with `str`, `even?` and
  `odd?`, and `inc` and `dec` for example ðŸ‘Š.

  Can you guess what `number?` does?

  When you're ready, click *Next* to continue ðŸ˜›."}
 {:type :stop}
 {:type :markdown :value
  "Great! We've learnt about how to invoke functions, and looking up what
  a function does. This is getting interesting!

  Here's a quick reference of these basic functions: [ClojureDocs Quick
  Ref](https://clojuredocs.org/quickref). In general,
  [ClojureDocs](https://clojuredocs.org) is a great resource for looking up
  documentation and examples of usage of such functions, like
  [even?](https://clojuredocs.org/clojure.core/even_q) for example.

  Let's move on to **[Lesson 3: Truth and lies](#/file/3)**"}
 ]
